name: Backend Pipeline

on:
  push:
    branches:
      - dev
    paths:
      - ".github/workflows/backend-pipeline.yaml"
      - "backend/**"
      - "docker/**"
  pull_request:
    branches:
      - dev
    paths:
      - ".github/workflows/backend-pipeline.yaml"
      - "backend/**"
      - "docker/**"
  release:
    types: [created]

jobs:
  CI:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java JDK
        uses: actions/setup-java@v4.4.0
        with:
          java-version: "21"
          distribution: "temurin"
          java-package: "jdk"

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ${{ vars.WORKING_DIRECTORY }}
        run: mvn clean package

      - name: Run maven tests
        working-directory: ${{ vars.WORKING_DIRECTORY }}
        run: mvn test jacoco:report
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ${{ vars.WORKING_DIRECTORY }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: backend/.scannerwork/report-task.txt
          pollingTimeoutSec: 600
          working-directory: ${{ vars.WORKING_DIRECTORY }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ vars.DOCKER_IMAGE_TAG}} -f docker/Dockerfile.backend .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push docker image to repository
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ vars.DOCKER_IMAGE_TAG}}

      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Find JAR file
        id: find_jar
        run: echo "JAR_PATH=$(find backend/target -name '*.jar' -type f)" >> $GITHUB_ENV
        
      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path:  ${{ env.JAR_PATH }}
          asset_name: hyundai-sales-backend-${{vars.DOCKER_IMAGE_TAG}}.jar
          asset_content_type: application/java-archive